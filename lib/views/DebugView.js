"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Draggable = require("draggable");
const Button_1 = require("./Button");
const atomAPI = require("atom");
class DebugView {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop'),
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick(),
        });
        this.draggable.set(atom.getSize().width / 2 - 87, 30);
    }
    setButtonEnabled(type, enabled) {
        this.buttons[type].isEnabled = enabled;
    }
    disableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        }
    }
    enableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        }
    }
    destroy() {
        for (const button of Object.values(this.buttons)) {
            button.destroy();
        }
    }
    addButton(description, icon, eventName) {
        const button = new Button_1.Button(description, icon);
        button.on('click', () => this.emitter.emit(eventName, undefined));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        for (const button of Object.values(this.buttons)) {
            button.cancelClick();
        }
    }
}
exports.DebugView = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBdUM7QUFDdkMscUNBQStCO0FBQy9CLGdDQUErQjtBQUkvQjtJQWNFO1FBWlEsWUFBTyxHQUVWLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBRW5CLE9BQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBUzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQTtRQUUvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUU1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFeEMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQzFELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDN0QsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztZQUN4RSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQztZQUNqRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO1NBQ3pELENBQUE7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDM0MsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFO1NBQzdDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUVNLGdCQUFnQixDQUFDLElBQWlCLEVBQUUsT0FBZ0I7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFBO0lBQ3hDLENBQUM7SUFFTSxzQkFBc0I7UUFDM0IsR0FBRyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1lBQzFCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDbEIsQ0FBQztJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsV0FBbUIsRUFBRSxJQUFZLEVBQUUsU0FBc0I7UUFDekUsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFDakUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDdEIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQTlFRCw4QkE4RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRHJhZ2dhYmxlID0gcmVxdWlyZSgnZHJhZ2dhYmxlJylcbmltcG9ydCB7QnV0dG9ufSBmcm9tICcuL0J1dHRvbidcbmltcG9ydCAqIGFzIGF0b21BUEkgZnJvbSAnYXRvbSdcblxudHlwZSBCdXR0b25UeXBlcyA9ICdzdGVwJyB8ICdiYWNrJyB8ICdmb3J3YXJkJyB8ICdjb250aW51ZScgfCAnc3RvcCdcblxuZXhwb3J0IGNsYXNzIERlYnVnVmlldyB7XG4gIHB1YmxpYyBlbGVtZW50OiBIVE1MRWxlbWVudFxuICBwcml2YXRlIGVtaXR0ZXI6IGF0b21BUEkuVEVtaXR0ZXI8e1xuICAgIFtLIGluIEJ1dHRvblR5cGVzXTogdW5kZWZpbmVkXG4gIH0+ID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWVtYmVyLW9yZGVyaW5nXG4gIHB1YmxpYyBvbiA9IHRoaXMuZW1pdHRlci5vbi5iaW5kKHRoaXMuZW1pdHRlcilcbiAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50XG4gIHByaXZhdGUgZHJhZ2dhYmxlOiBEcmFnZ2FibGVcblxuICBwcml2YXRlIGJ1dHRvbnM6IHtcbiAgICBbSyBpbiBCdXR0b25UeXBlc106IEJ1dHRvblxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXRvbS1wYW5lbCcpXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9ICdkZWJ1Zy10b29sYmFyIHBhZGRlZCdcblxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidG4tZ3JvdXAnKVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2J0bi1ncm91cC1sZycpXG5cbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpXG5cbiAgICB0aGlzLmJ1dHRvbnMgPSB7XG4gICAgICBzdGVwOiB0aGlzLmFkZEJ1dHRvbignU3RlcCBmb3J3YXJkJywgJ2Fycm93LWRvd24nLCAnc3RlcCcpLFxuICAgICAgYmFjazogdGhpcy5hZGRCdXR0b24oJ0JhY2sgaW4gaGlzdG9yeScsICdjaGV2cm9uLXVwJywgJ2JhY2snKSxcbiAgICAgIGZvcndhcmQ6IHRoaXMuYWRkQnV0dG9uKCdGb3J3YXJkIGluIGhpc3RvcnknLCAnY2hldnJvbi1kb3duJywgJ2ZvcndhcmQnKSxcbiAgICAgIGNvbnRpbnVlOiB0aGlzLmFkZEJ1dHRvbignQ29udGludWUnLCAncGxheWJhY2stcGxheScsICdjb250aW51ZScpLFxuICAgICAgc3RvcDogdGhpcy5hZGRCdXR0b24oJ1N0b3AnLCAncHJpbWl0aXZlLXNxdWFyZScsICdzdG9wJyksXG4gICAgfVxuXG4gICAgdGhpcy5kcmFnZ2FibGUgPSBuZXcgRHJhZ2dhYmxlKHRoaXMuZWxlbWVudCwge1xuICAgICAgb25EcmFnU3RhcnQ6ICgpID0+IHRoaXMuY2FuY2VsQnV0dG9uc0NsaWNrKCksXG4gICAgfSlcblxuICAgIHRoaXMuZHJhZ2dhYmxlLnNldChhdG9tLmdldFNpemUoKS53aWR0aCAvIDIgLSA4Ny8qc2l6ZSBvZiB0aGUgZWxlbWVudCovLCAzMClcbiAgfVxuXG4gIHB1YmxpYyBzZXRCdXR0b25FbmFibGVkKHR5cGU6IEJ1dHRvblR5cGVzLCBlbmFibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5idXR0b25zW3R5cGVdLmlzRW5hYmxlZCA9IGVuYWJsZWRcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlQWxsRGVidWdCdXR0b25zKCkge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5idXR0b25zKSkge1xuICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgYnV0dG9uLmlzRW5hYmxlZCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGVuYWJsZUFsbERlYnVnQnV0dG9ucygpIHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnV0dG9ucykpIHtcbiAgICAgIGlmIChidXR0b24gIT09IHRoaXMuYnV0dG9ucy5zdG9wKSB7XG4gICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICBidXR0b24uZGVzdHJveSgpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRCdXR0b24oZGVzY3JpcHRpb246IHN0cmluZywgaWNvbjogc3RyaW5nLCBldmVudE5hbWU6IEJ1dHRvblR5cGVzKSB7XG4gICAgY29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihkZXNjcmlwdGlvbiwgaWNvbilcbiAgICBidXR0b24ub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5lbWl0dGVyLmVtaXQoZXZlbnROYW1lLCB1bmRlZmluZWQpKVxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbi5lbGVtZW50KVxuXG4gICAgcmV0dXJuIGJ1dHRvblxuICB9XG5cbiAgcHJpdmF0ZSBjYW5jZWxCdXR0b25zQ2xpY2soKSB7XG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICBidXR0b24uY2FuY2VsQ2xpY2soKVxuICAgIH1cbiAgfVxufVxuIl19