"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Draggable = require("draggable");
const Button_1 = require("./Button");
const atomAPI = require("atom");
class DebugView {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop'),
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick(),
        });
        this.draggable.set(atom.getSize().width / 2 - 87, 30);
    }
    setButtonEnabled(type, enabled) {
        this.buttons[type].isEnabled = enabled;
    }
    disableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        }
    }
    enableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        }
    }
    destroy() {
        for (const button of Object.values(this.buttons)) {
            button.destroy();
        }
    }
    addButton(description, icon, eventName) {
        const button = new Button_1.Button(description, icon);
        button.on('click', () => this.emitter.emit(eventName, undefined));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        for (const button of Object.values(this.buttons)) {
            button.cancelClick();
        }
    }
}
exports.DebugView = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZpZXdzL0RlYnVnVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1QztBQUN2QyxxQ0FBaUM7QUFDakMsZ0NBQStCO0FBSS9CO0lBY0U7UUFaUSxZQUFPLEdBRVYsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFbkIsT0FBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFTNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFBO1FBRS9DLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBRTVDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV4QyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDMUQsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUM3RCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDO1lBQ3hFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDO1lBQ2pFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUM7U0FDekQsQ0FBQTtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUMzQyxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1NBQzdDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUVNLGdCQUFnQixDQUFDLElBQWlCLEVBQUUsT0FBZ0I7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFBO0lBQ3hDLENBQUM7SUFFTSxzQkFBc0I7UUFDM0IsR0FBRyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1lBQzFCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDbEIsQ0FBQztJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsV0FBbUIsRUFBRSxJQUFZLEVBQUUsU0FBc0I7UUFDekUsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUUxQyxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE5RUQsOEJBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERyYWdnYWJsZSA9IHJlcXVpcmUoJ2RyYWdnYWJsZScpXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuL0J1dHRvbidcbmltcG9ydCAqIGFzIGF0b21BUEkgZnJvbSAnYXRvbSdcblxudHlwZSBCdXR0b25UeXBlcyA9ICdzdGVwJyB8ICdiYWNrJyB8ICdmb3J3YXJkJyB8ICdjb250aW51ZScgfCAnc3RvcCdcblxuZXhwb3J0IGNsYXNzIERlYnVnVmlldyB7XG4gIHB1YmxpYyBlbGVtZW50OiBIVE1MRWxlbWVudFxuICBwcml2YXRlIGVtaXR0ZXI6IGF0b21BUEkuRW1pdHRlcjx7XG4gICAgW0sgaW4gQnV0dG9uVHlwZXNdOiB1bmRlZmluZWRcbiAgfT4gPSBuZXcgYXRvbUFQSS5FbWl0dGVyKClcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtZW1iZXItb3JkZXJpbmdcbiAgcHVibGljIG9uID0gdGhpcy5lbWl0dGVyLm9uLmJpbmQodGhpcy5lbWl0dGVyKVxuICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnRcbiAgcHJpdmF0ZSBkcmFnZ2FibGU6IERyYWdnYWJsZVxuXG4gIHByaXZhdGUgYnV0dG9uczoge1xuICAgIFtLIGluIEJ1dHRvblR5cGVzXTogQnV0dG9uXG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdG9tLXBhbmVsJylcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2RlYnVnLXRvb2xiYXIgcGFkZGVkJ1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2J0bi1ncm91cCcpXG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnRuLWdyb3VwLWxnJylcblxuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcilcblxuICAgIHRoaXMuYnV0dG9ucyA9IHtcbiAgICAgIHN0ZXA6IHRoaXMuYWRkQnV0dG9uKCdTdGVwIGZvcndhcmQnLCAnYXJyb3ctZG93bicsICdzdGVwJyksXG4gICAgICBiYWNrOiB0aGlzLmFkZEJ1dHRvbignQmFjayBpbiBoaXN0b3J5JywgJ2NoZXZyb24tdXAnLCAnYmFjaycpLFxuICAgICAgZm9yd2FyZDogdGhpcy5hZGRCdXR0b24oJ0ZvcndhcmQgaW4gaGlzdG9yeScsICdjaGV2cm9uLWRvd24nLCAnZm9yd2FyZCcpLFxuICAgICAgY29udGludWU6IHRoaXMuYWRkQnV0dG9uKCdDb250aW51ZScsICdwbGF5YmFjay1wbGF5JywgJ2NvbnRpbnVlJyksXG4gICAgICBzdG9wOiB0aGlzLmFkZEJ1dHRvbignU3RvcCcsICdwcmltaXRpdmUtc3F1YXJlJywgJ3N0b3AnKSxcbiAgICB9XG5cbiAgICB0aGlzLmRyYWdnYWJsZSA9IG5ldyBEcmFnZ2FibGUodGhpcy5lbGVtZW50LCB7XG4gICAgICBvbkRyYWdTdGFydDogKCkgPT4gdGhpcy5jYW5jZWxCdXR0b25zQ2xpY2soKSxcbiAgICB9KVxuXG4gICAgdGhpcy5kcmFnZ2FibGUuc2V0KGF0b20uZ2V0U2l6ZSgpLndpZHRoIC8gMiAtIDg3LypzaXplIG9mIHRoZSBlbGVtZW50Ki8sIDMwKVxuICB9XG5cbiAgcHVibGljIHNldEJ1dHRvbkVuYWJsZWQodHlwZTogQnV0dG9uVHlwZXMsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmJ1dHRvbnNbdHlwZV0uaXNFbmFibGVkID0gZW5hYmxlZFxuICB9XG5cbiAgcHVibGljIGRpc2FibGVBbGxEZWJ1Z0J1dHRvbnMoKSB7XG4gICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICBpZiAoYnV0dG9uICE9PSB0aGlzLmJ1dHRvbnMuc3RvcCkge1xuICAgICAgICBidXR0b24uaXNFbmFibGVkID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZW5hYmxlQWxsRGVidWdCdXR0b25zKCkge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5idXR0b25zKSkge1xuICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgYnV0dG9uLmlzRW5hYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnV0dG9ucykpIHtcbiAgICAgIGJ1dHRvbi5kZXN0cm95KClcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZEJ1dHRvbihkZXNjcmlwdGlvbjogc3RyaW5nLCBpY29uOiBzdHJpbmcsIGV2ZW50TmFtZTogQnV0dG9uVHlwZXMpIHtcbiAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uKGRlc2NyaXB0aW9uLCBpY29uKVxuICAgIGJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXR0ZXIuZW1pdChldmVudE5hbWUsIHVuZGVmaW5lZCkpXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uLmVsZW1lbnQpXG5cbiAgICByZXR1cm4gYnV0dG9uXG4gIH1cblxuICBwcml2YXRlIGNhbmNlbEJ1dHRvbnNDbGljaygpIHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnV0dG9ucykpIHtcbiAgICAgIGJ1dHRvbi5jYW5jZWxDbGljaygpXG4gICAgfVxuICB9XG59XG4iXX0=