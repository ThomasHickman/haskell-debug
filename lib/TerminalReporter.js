"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/../bin/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close', undefined);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close',
            });
            this.process.kill();
        }
        this.server.close();
    }
    prompt() {
        this.send({
            type: 'user-input',
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output,
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command,
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
}
exports.TerminalReporter = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXJtaW5hbFJlcG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQW9DO0FBQ3BDLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUdoQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakM7SUFlRTtRQWRRLFlBQU8sR0FJVixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVWLE9BQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBSy9DLGVBQVUsR0FBRyxFQUFFLENBQUE7UUFDZixjQUFTLEdBQUcsRUFBRSxDQUFBO1FBR3BCLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNoRCxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLFNBQVMsT0FBTyxDQUFBO1FBQ3hELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxTQUFTLHlCQUF5QixDQUFBO1FBRTlELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ3BDLENBQUM7WUFDRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxD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QUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQTtRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBaEdELDRDQWdHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuaW1wb3J0IG5ldCA9IHJlcXVpcmUoJ25ldCcpXG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpXG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9iaW4tc3JjL21lc3NhZ2UnXG5cbmNvbnN0IFBJUEVfUEFUSCA9ICdoYXNrZWxsLWRlYnVnJ1xuXG5leHBvcnQgY2xhc3MgVGVybWluYWxSZXBvcnRlciB7XG4gIHByaXZhdGUgZW1pdHRlcjogYXRvbUFQSS5FbWl0dGVyPHtcbiAgICAnY2xvc2UnOiB1bmRlZmluZWRcbiAgfSwge1xuICAgICdjb21tYW5kJzogc3RyaW5nXG4gIH0+ID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWVtYmVyLW9yZGVyaW5nXG4gIHB1YmxpYyByZWFkb25seSBvbiA9IHRoaXMuZW1pdHRlci5vbi5iaW5kKHRoaXMuZW1pdHRlcilcblxuICBwcml2YXRlIHByb2Nlc3M/OiBjcC5DaGlsZFByb2Nlc3NcbiAgcHJpdmF0ZSBzZXJ2ZXI6IG5ldC5TZXJ2ZXJcbiAgcHJpdmF0ZSBzb2NrZXQ/OiBuZXQuU29ja2V0XG4gIHByaXZhdGUgc3RyZWFtRGF0YSA9ICcnXG4gIHByaXZhdGUgdG90YWxEYXRhID0gJydcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBjb25uZWN0aW9uUGF0aCA9IG9zLnBsYXRmb3JtKCkgPT09ICd3aW4zMicgP1xuICAgICAgJ1xcXFxcXFxcLlxcXFxwaXBlXFxcXCcgKyBQSVBFX1BBVEggOiBgL3RtcC8ke1BJUEVfUEFUSH0uc29ja2BcbiAgICBjb25zdCB0ZXJtaW5hbEVjaG9QYXRoID0gYCR7X19kaXJuYW1lfS8uLi9iaW4vVGVybWluYWxFY2hvLmpzYFxuXG4gICAgdGhpcy5zZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKChzb2NrZXQpID0+IHtcbiAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgICBpZiAodGhpcy5zdHJlYW1EYXRhICE9PSAnJykge1xuICAgICAgICB0aGlzLnNvY2tldC53cml0ZSh0aGlzLnN0cmVhbURhdGEpXG4gICAgICB9XG4gICAgICBzb2NrZXQub24oJ2RhdGEnLCAoZGF0YSkgPT4gdGhpcy5vbkRhdGEoZGF0YSkpXG4gICAgICBzb2NrZXQub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2Nsb3NlJywgdW5kZWZpbmVkKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5zZXJ2ZXIubGlzdGVuKGNvbm5lY3Rpb25QYXRoLCAoKSA9PiB7XG4gICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnNob3dUZXJtaW5hbCcpKSB7XG4gICAgICAgIGNvbnN0IG5vZGVDb21tYW5kID0gYCR7YXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLm5vZGVDb21tYW5kJyl9ICR7dGVybWluYWxFY2hvUGF0aH1gXG4gICAgICAgIGNvbnN0IGNvbW1hbmRUb1J1biA9IHV0aWwuZm9ybWF0KGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy50ZXJtaW5hbENvbW1hbmQnKSwgbm9kZUNvbW1hbmQpXG5cbiAgICAgICAgdGhpcy5wcm9jZXNzID0gY3AuZXhlYyhjb21tYW5kVG9SdW4pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnByb2Nlc3MpIHtcbiAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgIHR5cGU6ICdjbG9zZScsXG4gICAgICB9KVxuICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKVxuICAgIH1cbiAgICB0aGlzLnNlcnZlci5jbG9zZSgpXG4gIH1cblxuICBwdWJsaWMgcHJvbXB0KCkge1xuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAndXNlci1pbnB1dCcsXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShvdXRwdXQ6IHN0cmluZykge1xuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAnbWVzc2FnZScsXG4gICAgICBjb250ZW50OiBvdXRwdXQsXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBkaXNwbGF5Q29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ2Rpc3BsYXktY29tbWFuZCcsXG4gICAgICBjb21tYW5kLFxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIHNlbmQoZGF0YTogTWVzc2FnZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZW5kaW5nRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpICsgJ1xcbidcblxuICAgICAgaWYgKHRoaXMuc29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1EYXRhICs9IHNlbmRpbmdEYXRhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvY2tldC53cml0ZShzZW5kaW5nRGF0YSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZ25vcmUgZXJyb3NcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uRGF0YShkYXRhOiBCdWZmZXIpIHtcbiAgICBjb25zdCBuZXdMaW5lUG9zID0gZGF0YS5pbmRleE9mKCdcXG4nKVxuICAgIGlmIChuZXdMaW5lUG9zICE9PSAtMSkge1xuICAgICAgdGhpcy50b3RhbERhdGEgKz0gZGF0YS5zbGljZSgwLCBuZXdMaW5lUG9zKVxuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2NvbW1hbmQnLCB0aGlzLnRvdGFsRGF0YSlcbiAgICAgIHRoaXMudG90YWxEYXRhID0gJydcbiAgICAgIHRoaXMub25EYXRhKGRhdGEuc2xpY2UobmV3TGluZVBvcyArIDEpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRvdGFsRGF0YSArPSBkYXRhXG4gICAgfVxuICB9XG59XG4iXX0=