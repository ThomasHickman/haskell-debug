"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/../bin/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close', undefined);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close',
            });
            this.process.kill();
        }
        this.server.close();
    }
    prompt() {
        this.send({
            type: 'user-input',
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output,
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command,
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
}
exports.TerminalReporter = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFvQztBQUNwQywyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixnQ0FBZ0M7QUFHaEMsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFBO0FBRWpDO0lBY0U7UUFiUSxZQUFPLEdBR1YsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFVixPQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUsvQyxlQUFVLEdBQUcsRUFBRSxDQUFBO1FBQ2YsY0FBUyxHQUFHLEVBQUUsQ0FBQTtRQUdwQixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTztZQUM5QyxlQUFlLEdBQUcsU0FBUyxHQUFHLFFBQVEsU0FBUyxPQUFPLENBQUE7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLFNBQVMseUJBQXlCLENBQUE7UUFFOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTTtZQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUNwQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNwQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQzlDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUN2QyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxNQUFNLFdBQVcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLElBQUksZ0JBQWdCLEVBQUUsQ0FBQTtnQkFDekYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO2dCQUUvRixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDdEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLE9BQU87UUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNSLElBQUksRUFBRSxPQUFPO2FBQ2QsQ0FBQyxDQUFBO1lBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNyQixDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDUixJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDLENBQUE7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQWM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNSLElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLE1BQU07U0FDaEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLGNBQWMsQ0FBQyxPQUFlO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDUixJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLE9BQU87U0FDUixDQUFDLENBQUE7SUFDSixDQUFDO0lBRU8sSUFBSSxDQUFDLElBQWE7UUFDeEIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUE7WUFFL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsVUFBVSxJQUFJLFdBQVcsQ0FBQTtZQUNoQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDaEMsQ0FBQztRQUNILENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWIsQ0FBQztJQUNILENBQUM7SUFFTyxNQUFNLENBQUMsSUFBWTtRQUN6QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFBO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQTtRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBL0ZELDRDQStGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuaW1wb3J0IG5ldCA9IHJlcXVpcmUoJ25ldCcpXG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpXG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9iaW4vbWVzc2FnZSdcblxuY29uc3QgUElQRV9QQVRIID0gJ2hhc2tlbGwtZGVidWcnXG5cbmV4cG9ydCBjbGFzcyBUZXJtaW5hbFJlcG9ydGVyIHtcbiAgcHJpdmF0ZSBlbWl0dGVyOiBhdG9tQVBJLlRFbWl0dGVyPHtcbiAgICAnY29tbWFuZCc6IHN0cmluZ1xuICAgICdjbG9zZSc6IHVuZGVmaW5lZFxuICB9PiA9IG5ldyBhdG9tQVBJLkVtaXR0ZXIoKVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG1lbWJlci1vcmRlcmluZ1xuICBwdWJsaWMgcmVhZG9ubHkgb24gPSB0aGlzLmVtaXR0ZXIub24uYmluZCh0aGlzLmVtaXR0ZXIpXG5cbiAgcHJpdmF0ZSBwcm9jZXNzPzogY3AuQ2hpbGRQcm9jZXNzXG4gIHByaXZhdGUgc2VydmVyOiBuZXQuU2VydmVyXG4gIHByaXZhdGUgc29ja2V0PzogbmV0LlNvY2tldFxuICBwcml2YXRlIHN0cmVhbURhdGEgPSAnJ1xuICBwcml2YXRlIHRvdGFsRGF0YSA9ICcnXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgY29ubmVjdGlvblBhdGggPSBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInID9cbiAgICAgICdcXFxcXFxcXC5cXFxccGlwZVxcXFwnICsgUElQRV9QQVRIIDogYC90bXAvJHtQSVBFX1BBVEh9LnNvY2tgXG4gICAgY29uc3QgdGVybWluYWxFY2hvUGF0aCA9IGAke19fZGlybmFtZX0vLi4vYmluL1Rlcm1pbmFsRWNoby5qc2BcblxuICAgIHRoaXMuc2VydmVyID0gbmV0LmNyZWF0ZVNlcnZlcigoc29ja2V0KSA9PiB7XG4gICAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgICAgaWYgKHRoaXMuc3RyZWFtRGF0YSAhPT0gJycpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUodGhpcy5zdHJlYW1EYXRhKVxuICAgICAgfVxuICAgICAgc29ja2V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHRoaXMub25EYXRhKGRhdGEpKVxuICAgICAgc29ja2V0Lm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjbG9zZScsIHVuZGVmaW5lZClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuc2VydmVyLmxpc3Rlbihjb25uZWN0aW9uUGF0aCwgKCkgPT4ge1xuICAgICAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5zaG93VGVybWluYWwnKSkge1xuICAgICAgICBjb25zdCBub2RlQ29tbWFuZCA9IGAke2F0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5ub2RlQ29tbWFuZCcpfSAke3Rlcm1pbmFsRWNob1BhdGh9YFxuICAgICAgICBjb25zdCBjb21tYW5kVG9SdW4gPSB1dGlsLmZvcm1hdChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcudGVybWluYWxDb21tYW5kJyksIG5vZGVDb21tYW5kKVxuXG4gICAgICAgIHRoaXMucHJvY2VzcyA9IGNwLmV4ZWMoY29tbWFuZFRvUnVuKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICB0aGlzLnNlbmQoe1xuICAgICAgICB0eXBlOiAnY2xvc2UnLFxuICAgICAgfSlcbiAgICAgIHRoaXMucHJvY2Vzcy5raWxsKClcbiAgICB9XG4gICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKVxuICB9XG5cbiAgcHVibGljIHByb21wdCgpIHtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ3VzZXItaW5wdXQnLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgd3JpdGUob3V0cHV0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgY29udGVudDogb3V0cHV0LFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgZGlzcGxheUNvbW1hbmQoY29tbWFuZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHR5cGU6ICdkaXNwbGF5LWNvbW1hbmQnLFxuICAgICAgY29tbWFuZCxcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzZW5kKGRhdGE6IE1lc3NhZ2UpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VuZGluZ0RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKSArICdcXG4nXG5cbiAgICAgIGlmICh0aGlzLnNvY2tldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtRGF0YSArPSBzZW5kaW5nRGF0YVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoc2VuZGluZ0RhdGEpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWdub3JlIGVycm9zXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvbkRhdGEoZGF0YTogQnVmZmVyKSB7XG4gICAgY29uc3QgbmV3TGluZVBvcyA9IGRhdGEuaW5kZXhPZignXFxuJylcbiAgICBpZiAobmV3TGluZVBvcyAhPT0gLTEpIHtcbiAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGEuc2xpY2UoMCwgbmV3TGluZVBvcylcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjb21tYW5kJywgdGhpcy50b3RhbERhdGEpXG4gICAgICB0aGlzLnRvdGFsRGF0YSA9ICcnXG4gICAgICB0aGlzLm9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b3RhbERhdGEgKz0gZGF0YVxuICAgIH1cbiAgfVxufVxuIl19