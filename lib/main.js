"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Debugger_1 = require("./Debugger");
const BreakpointUI_1 = require("./BreakpointUI");
const TooltipOverride_1 = require("./TooltipOverride");
const atomAPI = require("atom");
const os = require("os");
const path = require("path");
const cp = require("child_process");
const config_1 = require("./config");
const SelectDebugModeView_1 = require("./views/SelectDebugModeView");
var config_2 = require("./config");
exports.config = config_2.config;
const breakpointUI = new BreakpointUI_1.BreakpointUI();
let debuggerInst;
let upi;
let state;
let disposables;
const commands = {
    'debug': async ({ currentTarget }) => {
        const ob = upi && await upi.getOthersConfigParam('ide-haskell-cabal', 'builder');
        if (ob) {
            debuggerInst = new Debugger_1.Debugger(breakpointUI.breakpoints, currentTarget.getModel(), ob.name);
        }
        else {
            debuggerInst = new Debugger_1.Debugger(breakpointUI.breakpoints, currentTarget.getModel());
        }
    },
    'debug-back': () => {
        if (debuggerInst) {
            debuggerInst.back();
        }
    },
    'debug-forward': () => {
        if (debuggerInst) {
            debuggerInst.forward();
        }
    },
    'debug-step': () => {
        if (debuggerInst) {
            debuggerInst.step();
        }
    },
    'debug-stop': () => {
        if (debuggerInst) {
            debuggerInst.stop();
        }
    },
    'debug-continue': () => {
        if (debuggerInst) {
            debuggerInst.continue();
        }
    },
    'toggle-breakpoint': ({ currentTarget }) => {
        breakpointUI.toggleBreakpoint(currentTarget.getModel().getCursorBufferPosition().row + 1, currentTarget.getModel());
    },
    'set-break-on-exception': async () => {
        const result = await SelectDebugModeView_1.selectDebugModeView(config_1.debugModes, atom.config.get('haskell-debug.breakOnException'));
        if (result !== undefined) {
            atom.config.set('haskell-debug.breakOnException', result);
        }
    },
};
function onFirstRun() {
    state = {
        properlyActivated: false,
    };
    const isWin = os.platform().indexOf('win') > -1;
    const where = isWin ? 'where' : 'whereis';
    const out = cp.exec(where + ' node');
    out.on('close', (code) => {
        if (code === 1) {
            atom.config.set('haskell-debug.nodeCommand', path.resolve(atom.packages.getApmPath(), '../../bin/atom'));
            if (state) {
                state.properlyActivated = true;
            }
        }
    });
}
function activePaneObserver(pane) {
    if (atom.workspace.isTextEditor(pane)) {
        const te = pane;
        const scopes = te.getRootScopeDescriptor().getScopesArray();
        if (scopes.length === 1 && scopes[0] === 'source.haskell') {
            if (!te.hasHaskellBreakpoints) {
                breakpointUI.attachToNewTextEditor(te);
                te.hasHaskellBreakpoints = true;
            }
            if (debuggerInst) {
                debuggerInst.showPanels();
            }
            return;
        }
    }
    if (debuggerInst) {
        debuggerInst.hidePanels();
    }
}
function activate(_state) {
    disposables = new atomAPI.CompositeDisposable();
    state = _state;
    if (state === undefined || state.properlyActivated !== true) {
        onFirstRun();
    }
    disposables.add(atom.workspace.observeActivePaneItem(activePaneObserver));
    for (const command of Object.keys(commands)) {
        disposables.add(atom.commands.add("atom-text-editor[data-grammar='source haskell']", 'haskell:' + command, commands[command]));
    }
}
exports.activate = activate;
function deactivate() {
    disposables && disposables.dispose();
}
exports.deactivate = deactivate;
function serialize() {
    return state;
}
exports.serialize = serialize;
function consumeHaskellUpi(reg) {
    const tooltipOverride = new TooltipOverride_1.TooltipOverride(async (expression) => {
        if (debuggerInst === undefined) {
            return undefined;
        }
        return debuggerInst.resolveExpression(expression);
    });
    upi = reg({
        name: 'haskell-debug',
        tooltip: {
            priority: 100,
            handler: tooltipOverride.tooltipHandler.bind(tooltipOverride),
        },
    });
    return upi;
}
exports.consumeHaskellUpi = consumeHaskellUpi;
//# sourceMappingURL=data:application/json;base64,