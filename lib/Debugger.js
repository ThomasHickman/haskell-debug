"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atomAPI = require("atom");
const GHCIDebug_1 = require("./GHCIDebug");
const DebugView_1 = require("./views/DebugView");
const CurrentVariablesView_1 = require("./views/CurrentVariablesView");
const HistoryState_1 = require("./HistoryState");
const LineHighlighter_1 = require("./LineHighlighter");
const TerminalReporter_1 = require("./TerminalReporter");
class Debugger {
    constructor(breakpoints, editor, ideCabalBuilderCommand) {
        this.editor = editor;
        this.ideCabalBuilderCommand = ideCabalBuilderCommand;
        this.lineHighlighter = new LineHighlighter_1.LineHighlighter();
        this.ghciDebug = new GHCIDebug_1.GHCIDebug(this.getGhciCommand(), this.getGhciArgs(), this.editor.getPath());
        this.debugView = new DebugView_1.DebugView();
        this.historyState = new HistoryState_1.HistoryState();
        this.currentVariablesView = new CurrentVariablesView_1.CurrentVariablesView();
        this.terminalReporter = new TerminalReporter_1.TerminalReporter();
        this.disposables = new atomAPI.CompositeDisposable();
        this.debuggerEnabled = false;
        this.executingCommandFromConsole = false;
        this.launchGHCIDebugAndConsole(breakpoints);
        this.debugPanel = atom.workspace.addTopPanel({
            item: this.debugView.element,
        });
        this.debugView.on('step', () => this.step());
        this.debugView.on('back', () => this.back());
        this.debugView.on('forward', () => this.forward());
        this.debugView.on('continue', () => this.continue());
        this.debugView.on('stop', () => this.stop());
        this.currentVariablesPanel = atom.workspace.addTopPanel({
            item: this.currentVariablesView.element,
        });
        this.disposables.add(atom.config.onDidChange('haskell-debug.breakOnException', ({ newValue }) => {
            this.ghciDebug.setExceptionBreakLevel(newValue);
        }));
    }
    async resolveExpression(expression) {
        return this.ghciDebug.resolveExpression(expression);
    }
    back() {
        if (this.historyState.setCurrentPosition(this.historyState.getCurrentPosition() + 1)) {
            this.ghciDebug.back();
        }
    }
    forward() {
        if (this.historyState.setCurrentPosition(this.historyState.getCurrentPosition() - 1)) {
            this.ghciDebug.forward();
        }
    }
    continue() {
        this.ghciDebug.continue();
    }
    step() {
        this.ghciDebug.step();
    }
    stop() {
        this.ghciDebug.stop();
    }
    hidePanels() {
        this.debugPanel.hide();
        this.currentVariablesPanel.hide();
    }
    showPanels() {
        this.debugPanel.show();
        this.currentVariablesPanel.show();
    }
    getGhciCommand() {
        if (atom.config.get('haskell-debug.useIdeHaskellCabalBuilder')) {
            switch (this.ideCabalBuilderCommand) {
                case 'cabal':
                    return 'cabal';
                case 'stack':
                    return 'stack';
                default:
                    return atom.config.get('haskell-debug.GHCICommand');
            }
        }
        return atom.config.get('haskell-debug.GHCICommand');
    }
    getGhciArgs() {
        const args = [];
        const ghciArgs = atom.config.get('haskell-debug.GHCIArguments');
        if (atom.config.get('haskell-debug.useIdeHaskellCabalBuilder')) {
            switch (this.ideCabalBuilderCommand) {
                case 'cabal':
                    args.push('repl');
                    break;
                case 'stack':
                    args.push('ghci');
                    break;
            }
        }
        if (ghciArgs.length > 0
            && (this.ideCabalBuilderCommand === 'cabal'
                || this.ideCabalBuilderCommand === 'stack')) {
            return args.concat(`--ghc-options="${atom.config.get('haskell-debug.GHCIArguments')}"`);
        }
        else {
            return args.concat(atom.config.get('haskell-debug.GHCIArguments').split(' '));
        }
    }
    destroy() {
        this.lineHighlighter.destroy();
        this.ghciDebug.destroy();
        this.debugView.destroy();
        this.debugPanel.destroy();
        this.currentVariablesPanel.destroy();
        this.currentVariablesView.destroy();
        this.terminalReporter.destroy();
        this.disposables.dispose();
    }
    updateHistoryLengthAndEnableButtons(historyLength) {
        if (historyLength !== undefined) {
            this.historyState.setMaxPosition(historyLength);
        }
        this.debugView.enableAllDebugButtons();
        this.debugView.setButtonEnabled('back', this.historyState.backEnabled);
        this.debugView.setButtonEnabled('forward', this.historyState.forwardEnabled);
        this.debuggerEnabled = true;
    }
    async launchGHCIDebugAndConsole(breakpoints) {
        this.ghciDebug.on('line-changed', (info) => {
            this.lineHighlighter.hightlightLine(info);
            this.updateHistoryLengthAndEnableButtons(info.historyLength);
            this.currentVariablesView.update(info.localBindings, false);
        });
        this.ghciDebug.on('paused-on-exception', (info) => {
            this.lineHighlighter.destroy();
            this.updateHistoryLengthAndEnableButtons(info.historyLength);
            this.currentVariablesView.update(info.localBindings, true);
        });
        this.ghciDebug.on('debug-finished', () => {
            this.destroy();
        });
        this.ghciDebug.on('command-issued', (command) => {
            if (!this.executingCommandFromConsole) {
                this.terminalReporter.displayCommand(command);
            }
            this.debuggerEnabled = false;
            setTimeout(() => {
                if (!this.debuggerEnabled) {
                    this.debugView.disableAllDebugButtons();
                }
            }, 100);
        });
        this.ghciDebug.on('console-output', (output) => {
            this.terminalReporter.write(output);
        });
        this.ghciDebug.on('error-completed', (errorText) => {
            if (!this.executingCommandFromConsole) {
                atom.notifications.addError('GHCI Error', {
                    detail: errorText,
                    dismissable: true,
                });
            }
        });
        this.ghciDebug.on('error', (errorText) => {
            this.terminalReporter.write(errorText);
        });
        await this.ghciDebug.addedAllListeners();
        this.terminalReporter.on('command', async (command) => {
            this.executingCommandFromConsole = true;
            await this.ghciDebug.run(command, true, true);
            this.executingCommandFromConsole = false;
        });
        this.terminalReporter.on('close', () => {
            this.ghciDebug.stop();
        });
        this.ghciDebug.setExceptionBreakLevel(atom.config.get('haskell-debug.breakOnException'));
        this.debugView.disableAllDebugButtons();
        const fileToDebug = this.editor.getPath();
        if (!fileToDebug)
            throw new Error('Trying to debug on a text editor with no filename');
        this.ghciDebug.loadModule(fileToDebug);
        breakpoints.forEach((ob) => {
            if (ob.file === fileToDebug) {
                this.ghciDebug.addBreakpoint(ob.line.toString());
            }
            else {
                this.ghciDebug.addBreakpoint(ob);
            }
        });
        this.ghciDebug.startDebug(atom.config.get('haskell-debug.functionToDebug'));
    }
}
exports.Debugger = Debugger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGliL0RlYnVnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQStCO0FBQy9CLDJDQUFtRztBQUNuRyxpREFBNkM7QUFDN0MsdUVBQW1FO0FBQ25FLGlEQUE2QztBQUM3Qyx1REFBbUQ7QUFDbkQseURBQXFEO0FBRXJEO0lBYUUsWUFDRSxXQUF5QixFQUNqQixNQUEwQixFQUMxQixzQkFBK0I7UUFEL0IsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFDMUIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFTO1FBZnhCLG9CQUFlLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUE7UUFDdkMsY0FBUyxHQUFHLElBQUkscUJBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUMzRixjQUFTLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUE7UUFDM0IsaUJBQVksR0FBRyxJQUFJLDJCQUFZLEVBQUUsQ0FBQTtRQUVqQyx5QkFBb0IsR0FBRyxJQUFJLDJDQUFvQixFQUFFLENBQUE7UUFFakQscUJBQWdCLEdBQUcsSUFBSSxtQ0FBZ0IsRUFBRSxDQUFBO1FBQ3pDLGdCQUFXLEdBQUcsSUFBSSxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtRQUN4RCxvQkFBZSxHQUFHLEtBQUssQ0FBQTtRQUN2QixnQ0FBMkIsR0FBRyxLQUFLLENBQUE7UUFPekMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRTNDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7WUFDM0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTztTQUM3QixDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsU0FB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QUM3RSxDQUFDO0NBQ0Y7QUExTkQsNEJBME5DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXRvbUFQSSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgR0hDSURlYnVnLCBCcmVha0luZm8sIEV4Y2VwdGlvbkluZm8sIEJyZWFrcG9pbnQsIEV4Y2VwdGlvbkJyZWFrTGV2ZWxzIH0gZnJvbSAnLi9HSENJRGVidWcnXG5pbXBvcnQgeyBEZWJ1Z1ZpZXcgfSBmcm9tICcuL3ZpZXdzL0RlYnVnVmlldydcbmltcG9ydCB7IEN1cnJlbnRWYXJpYWJsZXNWaWV3IH0gZnJvbSAnLi92aWV3cy9DdXJyZW50VmFyaWFibGVzVmlldydcbmltcG9ydCB7IEhpc3RvcnlTdGF0ZSB9IGZyb20gJy4vSGlzdG9yeVN0YXRlJ1xuaW1wb3J0IHsgTGluZUhpZ2hsaWdodGVyIH0gZnJvbSAnLi9MaW5lSGlnaGxpZ2h0ZXInXG5pbXBvcnQgeyBUZXJtaW5hbFJlcG9ydGVyIH0gZnJvbSAnLi9UZXJtaW5hbFJlcG9ydGVyJ1xuXG5leHBvcnQgY2xhc3MgRGVidWdnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGxpbmVIaWdobGlnaHRlciA9IG5ldyBMaW5lSGlnaGxpZ2h0ZXIoKVxuICBwcml2YXRlIHJlYWRvbmx5IGdoY2lEZWJ1ZyA9IG5ldyBHSENJRGVidWcodGhpcy5nZXRHaGNpQ29tbWFuZCgpLCB0aGlzLmdldEdoY2lBcmdzKCksIHRoaXMuZWRpdG9yLmdldFBhdGgoKSlcbiAgcHJpdmF0ZSByZWFkb25seSBkZWJ1Z1ZpZXcgPSBuZXcgRGVidWdWaWV3KClcbiAgcHJpdmF0ZSByZWFkb25seSBoaXN0b3J5U3RhdGUgPSBuZXcgSGlzdG9yeVN0YXRlKClcbiAgcHJpdmF0ZSBkZWJ1Z1BhbmVsOiBhdG9tQVBJLlBhbmVsPEhUTUxFbGVtZW50PlxuICBwcml2YXRlIHJlYWRvbmx5IGN1cnJlbnRWYXJpYWJsZXNWaWV3ID0gbmV3IEN1cnJlbnRWYXJpYWJsZXNWaWV3KClcbiAgcHJpdmF0ZSBjdXJyZW50VmFyaWFibGVzUGFuZWw6IGF0b21BUEkuUGFuZWw8SFRNTEVsZW1lbnQ+XG4gIHByaXZhdGUgcmVhZG9ubHkgdGVybWluYWxSZXBvcnRlciA9IG5ldyBUZXJtaW5hbFJlcG9ydGVyKClcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NhYmxlcyA9IG5ldyBhdG9tQVBJLkNvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBwcml2YXRlIGRlYnVnZ2VyRW5hYmxlZCA9IGZhbHNlXG4gIHByaXZhdGUgZXhlY3V0aW5nQ29tbWFuZEZyb21Db25zb2xlID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcihcbiAgICBicmVha3BvaW50czogQnJlYWtwb2ludFtdLFxuICAgIHByaXZhdGUgZWRpdG9yOiBhdG9tQVBJLlRleHRFZGl0b3IsXG4gICAgcHJpdmF0ZSBpZGVDYWJhbEJ1aWxkZXJDb21tYW5kPzogc3RyaW5nLFxuICApIHtcbiAgICB0aGlzLmxhdW5jaEdIQ0lEZWJ1Z0FuZENvbnNvbGUoYnJlYWtwb2ludHMpXG5cbiAgICB0aGlzLmRlYnVnUGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRUb3BQYW5lbCh7XG4gICAgICBpdGVtOiB0aGlzLmRlYnVnVmlldy5lbGVtZW50LFxuICAgIH0pXG5cbiAgICB0aGlzLmRlYnVnVmlldy5vbignc3RlcCcsICgpID0+IHRoaXMuc3RlcCgpKVxuICAgIHRoaXMuZGVidWdWaWV3Lm9uKCdiYWNrJywgKCkgPT4gdGhpcy5iYWNrKCkpXG4gICAgdGhpcy5kZWJ1Z1ZpZXcub24oJ2ZvcndhcmQnLCAoKSA9PiB0aGlzLmZvcndhcmQoKSlcbiAgICB0aGlzLmRlYnVnVmlldy5vbignY29udGludWUnLCAoKSA9PiB0aGlzLmNvbnRpbnVlKCkpXG4gICAgdGhpcy5kZWJ1Z1ZpZXcub24oJ3N0b3AnLCAoKSA9PiB0aGlzLnN0b3AoKSlcblxuICAgIHRoaXMuY3VycmVudFZhcmlhYmxlc1BhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkVG9wUGFuZWwoe1xuICAgICAgaXRlbTogdGhpcy5jdXJyZW50VmFyaWFibGVzVmlldy5lbGVtZW50LFxuICAgIH0pXG5cbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChhdG9tLmNvbmZpZy5vbkRpZENoYW5nZSgnaGFza2VsbC1kZWJ1Zy5icmVha09uRXhjZXB0aW9uJywgKHsgbmV3VmFsdWUgfSkgPT4ge1xuICAgICAgdGhpcy5naGNpRGVidWcuc2V0RXhjZXB0aW9uQnJlYWtMZXZlbChuZXdWYWx1ZSBhcyBFeGNlcHRpb25CcmVha0xldmVscylcbiAgICB9KSlcbiAgfVxuXG4gIC8qKiBGb3IgdGhlIHRvb2x0aXAgb3ZlcnJpZGUqL1xuICBwdWJsaWMgYXN5bmMgcmVzb2x2ZUV4cHJlc3Npb24oZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2hjaURlYnVnLnJlc29sdmVFeHByZXNzaW9uKGV4cHJlc3Npb24pXG4gIH1cblxuICBwdWJsaWMgYmFjaygpIHtcbiAgICBpZiAodGhpcy5oaXN0b3J5U3RhdGUuc2V0Q3VycmVudFBvc2l0aW9uKHRoaXMuaGlzdG9yeVN0YXRlLmdldEN1cnJlbnRQb3NpdGlvbigpICsgMSkpIHtcbiAgICAgIHRoaXMuZ2hjaURlYnVnLmJhY2soKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBmb3J3YXJkKCkge1xuICAgIGlmICh0aGlzLmhpc3RvcnlTdGF0ZS5zZXRDdXJyZW50UG9zaXRpb24odGhpcy5oaXN0b3J5U3RhdGUuZ2V0Q3VycmVudFBvc2l0aW9uKCkgLSAxKSkge1xuICAgICAgdGhpcy5naGNpRGVidWcuZm9yd2FyZCgpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNvbnRpbnVlKCkge1xuICAgIHRoaXMuZ2hjaURlYnVnLmNvbnRpbnVlKClcbiAgfVxuXG4gIHB1YmxpYyBzdGVwKCkge1xuICAgIHRoaXMuZ2hjaURlYnVnLnN0ZXAoKVxuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5naGNpRGVidWcuc3RvcCgpIC8vIHRoaXMgd2lsbCB0cmlnZ2VyIGRlYnVnLWZpbmlzaGVkIGV2ZW50XG4gIH1cblxuICBwdWJsaWMgaGlkZVBhbmVscygpIHtcbiAgICB0aGlzLmRlYnVnUGFuZWwuaGlkZSgpXG4gICAgdGhpcy5jdXJyZW50VmFyaWFibGVzUGFuZWwuaGlkZSgpXG4gIH1cblxuICBwdWJsaWMgc2hvd1BhbmVscygpIHtcbiAgICB0aGlzLmRlYnVnUGFuZWwuc2hvdygpXG4gICAgdGhpcy5jdXJyZW50VmFyaWFibGVzUGFuZWwuc2hvdygpXG4gIH1cblxuICBwcml2YXRlIGdldEdoY2lDb21tYW5kKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcudXNlSWRlSGFza2VsbENhYmFsQnVpbGRlcicpKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuaWRlQ2FiYWxCdWlsZGVyQ29tbWFuZCkge1xuICAgICAgICBjYXNlICdjYWJhbCc6XG4gICAgICAgICAgcmV0dXJuICdjYWJhbCdcbiAgICAgICAgY2FzZSAnc3RhY2snOlxuICAgICAgICAgIHJldHVybiAnc3RhY2snXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5HSENJQ29tbWFuZCcpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuR0hDSUNvbW1hbmQnKVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRHaGNpQXJncygpIHtcbiAgICBjb25zdCBhcmdzOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgZ2hjaUFyZ3MgPSBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuR0hDSUFyZ3VtZW50cycpXG5cbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnVzZUlkZUhhc2tlbGxDYWJhbEJ1aWxkZXInKSkge1xuICAgICAgc3dpdGNoICh0aGlzLmlkZUNhYmFsQnVpbGRlckNvbW1hbmQpIHtcbiAgICAgICAgY2FzZSAnY2FiYWwnOlxuICAgICAgICAgIGFyZ3MucHVzaCgncmVwbCcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc3RhY2snOlxuICAgICAgICAgIGFyZ3MucHVzaCgnZ2hjaScpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ2hjaUFyZ3MubGVuZ3RoID4gMFxuICAgICAgJiYgKHRoaXMuaWRlQ2FiYWxCdWlsZGVyQ29tbWFuZCA9PT0gJ2NhYmFsJ1xuICAgICAgICB8fCB0aGlzLmlkZUNhYmFsQnVpbGRlckNvbW1hbmQgPT09ICdzdGFjaycpKSB7XG4gICAgICByZXR1cm4gYXJncy5jb25jYXQoYC0tZ2hjLW9wdGlvbnM9XCIke2F0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5HSENJQXJndW1lbnRzJyl9XCJgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJncy5jb25jYXQoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLkdIQ0lBcmd1bWVudHMnKS5zcGxpdCgnICcpKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcbiAgICB0aGlzLmxpbmVIaWdobGlnaHRlci5kZXN0cm95KClcbiAgICB0aGlzLmdoY2lEZWJ1Zy5kZXN0cm95KClcbiAgICB0aGlzLmRlYnVnVmlldy5kZXN0cm95KClcbiAgICB0aGlzLmRlYnVnUGFuZWwuZGVzdHJveSgpXG4gICAgdGhpcy5jdXJyZW50VmFyaWFibGVzUGFuZWwuZGVzdHJveSgpXG4gICAgdGhpcy5jdXJyZW50VmFyaWFibGVzVmlldy5kZXN0cm95KClcbiAgICB0aGlzLnRlcm1pbmFsUmVwb3J0ZXIuZGVzdHJveSgpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSGlzdG9yeUxlbmd0aEFuZEVuYWJsZUJ1dHRvbnMoaGlzdG9yeUxlbmd0aD86IG51bWJlcikge1xuICAgIGlmIChoaXN0b3J5TGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaGlzdG9yeVN0YXRlLnNldE1heFBvc2l0aW9uKGhpc3RvcnlMZW5ndGgpXG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1Z1ZpZXcuZW5hYmxlQWxsRGVidWdCdXR0b25zKClcbiAgICB0aGlzLmRlYnVnVmlldy5zZXRCdXR0b25FbmFibGVkKCdiYWNrJywgdGhpcy5oaXN0b3J5U3RhdGUuYmFja0VuYWJsZWQpXG4gICAgdGhpcy5kZWJ1Z1ZpZXcuc2V0QnV0dG9uRW5hYmxlZCgnZm9yd2FyZCcsIHRoaXMuaGlzdG9yeVN0YXRlLmZvcndhcmRFbmFibGVkKVxuICAgIHRoaXMuZGVidWdnZXJFbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsYXVuY2hHSENJRGVidWdBbmRDb25zb2xlKGJyZWFrcG9pbnRzOiBCcmVha3BvaW50W10pIHtcbiAgICB0aGlzLmdoY2lEZWJ1Zy5vbignbGluZS1jaGFuZ2VkJywgKGluZm86IEJyZWFrSW5mbykgPT4ge1xuICAgICAgdGhpcy5saW5lSGlnaGxpZ2h0ZXIuaGlnaHRsaWdodExpbmUoaW5mbylcbiAgICAgIHRoaXMudXBkYXRlSGlzdG9yeUxlbmd0aEFuZEVuYWJsZUJ1dHRvbnMoaW5mby5oaXN0b3J5TGVuZ3RoKVxuICAgICAgdGhpcy5jdXJyZW50VmFyaWFibGVzVmlldy51cGRhdGUoaW5mby5sb2NhbEJpbmRpbmdzLCBmYWxzZSlcbiAgICB9KVxuXG4gICAgdGhpcy5naGNpRGVidWcub24oJ3BhdXNlZC1vbi1leGNlcHRpb24nLCAoaW5mbzogRXhjZXB0aW9uSW5mbykgPT4ge1xuICAgICAgdGhpcy5saW5lSGlnaGxpZ2h0ZXIuZGVzdHJveSgpXG4gICAgICB0aGlzLnVwZGF0ZUhpc3RvcnlMZW5ndGhBbmRFbmFibGVCdXR0b25zKGluZm8uaGlzdG9yeUxlbmd0aClcbiAgICAgIHRoaXMuY3VycmVudFZhcmlhYmxlc1ZpZXcudXBkYXRlKGluZm8ubG9jYWxCaW5kaW5ncywgdHJ1ZSlcbiAgICB9KVxuXG4gICAgdGhpcy5naGNpRGVidWcub24oJ2RlYnVnLWZpbmlzaGVkJywgKCkgPT4ge1xuICAgICAgdGhpcy5kZXN0cm95KClcbiAgICB9KVxuXG4gICAgdGhpcy5naGNpRGVidWcub24oJ2NvbW1hbmQtaXNzdWVkJywgKGNvbW1hbmQ6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKCF0aGlzLmV4ZWN1dGluZ0NvbW1hbmRGcm9tQ29uc29sZSkge1xuICAgICAgICB0aGlzLnRlcm1pbmFsUmVwb3J0ZXIuZGlzcGxheUNvbW1hbmQoY29tbWFuZClcbiAgICAgIH1cblxuICAgICAgdGhpcy5kZWJ1Z2dlckVuYWJsZWQgPSBmYWxzZVxuICAgICAgc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5kZWJ1Z2dlckVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWdWaWV3LmRpc2FibGVBbGxEZWJ1Z0J1dHRvbnMoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgMTAwLFxuICAgICAgKVxuICAgIH0pXG5cbiAgICB0aGlzLmdoY2lEZWJ1Zy5vbignY29uc29sZS1vdXRwdXQnLCAob3V0cHV0OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMudGVybWluYWxSZXBvcnRlci53cml0ZShvdXRwdXQpXG4gICAgfSlcblxuICAgIHRoaXMuZ2hjaURlYnVnLm9uKCdlcnJvci1jb21wbGV0ZWQnLCAoZXJyb3JUZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICghdGhpcy5leGVjdXRpbmdDb21tYW5kRnJvbUNvbnNvbGUpIHtcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKCdHSENJIEVycm9yJywge1xuICAgICAgICAgIGRldGFpbDogZXJyb3JUZXh0LFxuICAgICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmdoY2lEZWJ1Zy5vbignZXJyb3InLCAoZXJyb3JUZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMudGVybWluYWxSZXBvcnRlci53cml0ZShlcnJvclRleHQpXG4gICAgfSlcblxuICAgIGF3YWl0IHRoaXMuZ2hjaURlYnVnLmFkZGVkQWxsTGlzdGVuZXJzKClcblxuICAgIHRoaXMudGVybWluYWxSZXBvcnRlci5vbignY29tbWFuZCcsIGFzeW5jIChjb21tYW5kOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZEZyb21Db25zb2xlID0gdHJ1ZVxuICAgICAgYXdhaXQgdGhpcy5naGNpRGVidWcucnVuKGNvbW1hbmQsIHRydWUsIHRydWUpXG4gICAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRGcm9tQ29uc29sZSA9IGZhbHNlXG4gICAgfSlcblxuICAgIHRoaXMudGVybWluYWxSZXBvcnRlci5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICB0aGlzLmdoY2lEZWJ1Zy5zdG9wKClcbiAgICB9KVxuXG4gICAgdGhpcy5naGNpRGVidWcuc2V0RXhjZXB0aW9uQnJlYWtMZXZlbChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuYnJlYWtPbkV4Y2VwdGlvbicpKVxuXG4gICAgdGhpcy5kZWJ1Z1ZpZXcuZGlzYWJsZUFsbERlYnVnQnV0dG9ucygpXG5cbiAgICBjb25zdCBmaWxlVG9EZWJ1ZyA9IHRoaXMuZWRpdG9yLmdldFBhdGgoKVxuICAgIGlmICghZmlsZVRvRGVidWcpIHRocm93IG5ldyBFcnJvcignVHJ5aW5nIHRvIGRlYnVnIG9uIGEgdGV4dCBlZGl0b3Igd2l0aCBubyBmaWxlbmFtZScpXG4gICAgdGhpcy5naGNpRGVidWcubG9hZE1vZHVsZShmaWxlVG9EZWJ1ZylcblxuICAgIGJyZWFrcG9pbnRzLmZvckVhY2goKG9iKSA9PiB7XG4gICAgICBpZiAob2IuZmlsZSA9PT0gZmlsZVRvRGVidWcpIHtcbiAgICAgICAgdGhpcy5naGNpRGVidWcuYWRkQnJlYWtwb2ludChvYi5saW5lLnRvU3RyaW5nKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdoY2lEZWJ1Zy5hZGRCcmVha3BvaW50KG9iKSAvLyBUT0RPOiBtYWtlIHRoaXMgd29yayBwcm9wZXJseVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmdoY2lEZWJ1Zy5zdGFydERlYnVnKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5mdW5jdGlvblRvRGVidWcnKSlcbiAgfVxufVxuIl19