"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this._breakpoints = [];
        this.markers = new WeakMap();
    }
    get breakpoints() {
        return this._breakpoints;
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber,
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath(),
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        if (!lineNumbersModal)
            throw new Error('No line-number gutter on editor');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint',
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath(),
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
}
exports.BreakpointUI = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0JyZWFrcG9pbnRVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDRCQUE0QjtBQUc1QjtJQUFBO1FBQ1UsaUJBQVksR0FBaUIsRUFBRSxDQUFBO1FBQy9CLFlBQU8sR0FBK0MsSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQStFN0UsQ0FBQztJQTdFQyxJQUFXLFdBQVc7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUE7SUFDMUIsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFVBQWtCLEVBQUUsRUFBc0I7UUFDaEUsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzdDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsYUFBYSxDQUNoQjtnQkFDRSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7YUFDbkIsRUFDRCxFQUFFLENBQ0gsQ0FBQTtRQUNILENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtnQkFDakMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUVNLHFCQUFxQixDQUFDLEVBQXNCO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUN6RCxFQUFFLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO1FBQ3pFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFnQixDQUFBO1FBRWhFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNwQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUMzRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssZ0JBQWdCO21CQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxTQUFTLEdBQUksRUFBRSxDQUFDLE1BQXNCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQTtnQkFDOUQsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLENBQUMsQ0FBQTtvQkFDakYsTUFBTSxDQUFBO2dCQUNSLENBQUM7Z0JBRUQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDdkMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFTyxhQUFhLENBQUMsVUFBc0IsRUFBRSxFQUFzQjtRQUNsRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQ3pDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDaEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUUzQixFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ2xDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSwwQkFBMEI7U0FDbEMsQ0FBQyxDQUFBO1FBRUYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDdEMsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFBO1lBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQTtZQUN4QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtRQUU5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU8sa0JBQWtCLENBQUMsRUFBc0I7UUFDL0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3pCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO1NBQ25CLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDaEUsQ0FBQztDQUNGO0FBakZELG9DQWlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdG9tQVBJID0gcmVxdWlyZSgnYXRvbScpXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5pbXBvcnQgeyBCcmVha3BvaW50IH0gZnJvbSAnLi9HSENJRGVidWcnXG5cbmV4cG9ydCBjbGFzcyBCcmVha3BvaW50VUkge1xuICBwcml2YXRlIF9icmVha3BvaW50czogQnJlYWtwb2ludFtdID0gW11cbiAgcHJpdmF0ZSBtYXJrZXJzOiBXZWFrTWFwPEJyZWFrcG9pbnQsIGF0b21BUEkuRGlzcGxheU1hcmtlcj4gPSBuZXcgV2Vha01hcCgpXG5cbiAgcHVibGljIGdldCBicmVha3BvaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fYnJlYWtwb2ludHNcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGVCcmVha3BvaW50KGxpbmVOdW1iZXI6IG51bWJlciwgdGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywge1xuICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICB9KVxuXG4gICAgaWYgKGJyZWFrcG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRCcmVha3BvaW50KFxuICAgICAgICB7XG4gICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICBmaWxlOiB0ZS5nZXRQYXRoKCksXG4gICAgICAgIH0sXG4gICAgICAgIHRlLFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLm1hcmtlcnMuZ2V0KGJyZWFrcG9pbnQpXG4gICAgICAgIGlmIChtKSB7IG0uZGVzdHJveSgpIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGF0dGFjaFRvTmV3VGV4dEVkaXRvcih0ZTogYXRvbUFQSS5UZXh0RWRpdG9yKSB7XG4gICAgLy8gcGF0Y2ggdGhlIHRleHQgZWRpdG9yIHRvIGFkZCBicmVha3BvaW50cyBvbiBjbGlja1xuICAgIGNvbnN0IGxpbmVOdW1iZXJzTW9kYWwgPSB0ZS5ndXR0ZXJXaXRoTmFtZSgnbGluZS1udW1iZXInKVxuICAgIGlmICghbGluZU51bWJlcnNNb2RhbCkgdGhyb3cgbmV3IEVycm9yKCdObyBsaW5lLW51bWJlciBndXR0ZXIgb24gZWRpdG9yJylcbiAgICBjb25zdCB2aWV3ID0gYXRvbS52aWV3cy5nZXRWaWV3KGxpbmVOdW1iZXJzTW9kYWwpIGFzIEhUTUxFbGVtZW50XG5cbiAgICB2aWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XG4gICAgICBjb25zdCBzY29wZXMgPSB0ZS5nZXRSb290U2NvcGVEZXNjcmlwdG9yKCkuZ2V0U2NvcGVzQXJyYXkoKVxuICAgICAgaWYgKHNjb3Blcy5sZW5ndGggPT09IDEgJiYgc2NvcGVzWzBdID09PSAnc291cmNlLmhhc2tlbGwnXG4gICAgICAgICYmIGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5jbGlja0d1dHRlclRvVG9nZ2xlQnJlYWtwb2ludCcpKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlclJvdyA9IChldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuYnVmZmVyUm93XG4gICAgICAgIGlmIChidWZmZXJSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcImhhc2tlbGwtZGVidWc6IGNsaWNrIG9uIGd1dHRlciBkb2Vzbid0IGhhdmUgYSBidWZmZXIgcm93IHByb3BlcnR5XCIpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcGFyc2VJbnQoYnVmZmVyUm93LCAxMCkgKyAxXG4gICAgICAgIHRoaXMudG9nZ2xlQnJlYWtwb2ludChsaW5lTnVtYmVyLCB0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5zZXRGaWxlQnJlYWtwb2ludHModGUpXG4gIH1cblxuICBwcml2YXRlIHNldEJyZWFrcG9pbnQoYnJlYWtwb2ludDogQnJlYWtwb2ludCwgdGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRNYXJrZXIgPSB0ZS5tYXJrQnVmZmVyUmFuZ2UoXG4gICAgICBbW2JyZWFrcG9pbnQubGluZSAtIDEsIDBdLCBbYnJlYWtwb2ludC5saW5lLCAwXV0sXG4gICAgICB7IGludmFsaWRhdGU6ICdpbnNpZGUnIH0pXG5cbiAgICB0ZS5kZWNvcmF0ZU1hcmtlcihicmVha3BvaW50TWFya2VyLCB7XG4gICAgICB0eXBlOiAnbGluZS1udW1iZXInLFxuICAgICAgY2xhc3M6ICdoYXNrZWxsLWRlYnVnLWJyZWFrcG9pbnQnLFxuICAgIH0pXG5cbiAgICBicmVha3BvaW50TWFya2VyLm9uRGlkQ2hhbmdlKChjaGFuZ2UpID0+IHtcbiAgICAgIGJyZWFrcG9pbnQubGluZSA9IGNoYW5nZS5uZXdIZWFkQnVmZmVyUG9zaXRpb24ucm93XG4gICAgICBpZiAoIWNoYW5nZS5pc1ZhbGlkKSB7XG4gICAgICAgIF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIGJyZWFrcG9pbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMubWFya2Vycy5zZXQoYnJlYWtwb2ludCwgYnJlYWtwb2ludE1hcmtlcilcblxuICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChicmVha3BvaW50KVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRGaWxlQnJlYWtwb2ludHModGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIF8uZmlsdGVyKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICB9KS5mb3JFYWNoKChicmVha3BvaW50KSA9PiB0aGlzLnNldEJyZWFrcG9pbnQoYnJlYWtwb2ludCwgdGUpKVxuICB9XG59XG4iXX0=