"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const os = require("os");
const path = require("path");
const atomAPI = require("atom");
class GHCIDebug {
    constructor(ghciCommand = 'ghci', ghciArgs = [], folder) {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.ignoreErrors = false;
        this.currentStderrOutput = '';
        this.currentCommandBuffer = '';
        this.commands = [];
        this.commandFinishedString = 'command_finish_o4uB1whagteqE8xBq9oq';
        this.moduleNameByPath = new Map();
        this.ghciCmd = cp.spawn(ghciCommand, ghciArgs, { cwd: folder, shell: true });
        this.ghciCmd.on('exit', () => {
            this.emitter.emit('debug-finished', undefined);
        });
        this.stdout = this.ghciCmd.stdout;
        this.stdin = this.ghciCmd.stdin;
        this.stderr = this.ghciCmd.stderr;
        this.stdout.on('readable', () => this.onStdoutReadable());
        this.stderr.on('readable', () => this.onStderrReadable());
        this.addReadyEvent();
        this.startText = this.run(`:set prompt "%s> ${this.commandFinishedString}"`, false, false, false, true);
    }
    destroy() {
        this.stop();
    }
    async loadModule(name) {
        const cwd = path.dirname(name);
        await this.run(`:cd ${cwd}`);
        await this.run(`:load ${name}`);
    }
    async setExceptionBreakLevel(level) {
        await this.run(':unset -fbreak-on-exception');
        await this.run(':unset -fbreak-on-error');
        switch (level) {
            case 'exceptions':
                await this.run(':set -fbreak-on-exception');
                break;
            case 'errors':
                await this.run(':set -fbreak-on-error');
                break;
            case 'none':
                break;
        }
    }
    async addBreakpoint(breakpoint) {
        if (typeof breakpoint === 'string') {
            await this.run(`:break ${breakpoint}`);
        }
        else if (breakpoint.file) {
            try {
                const moduleName = await this.moduleNameFromFilePath(breakpoint.file);
                await this.run(`:break ${moduleName} ${breakpoint.line}`);
            }
            catch (e) {
                atom.notifications.addError(`Failed to set breakpoint on ${breakpoint.file}`, {
                    detail: e.toString(),
                    stack: e.stack,
                    dismissable: true,
                });
            }
        }
        else {
            atom.notifications.addError('Failed to set breakpoint', {
                detail: 'Text editor has no filename',
                dismissable: true,
            });
        }
    }
    async resolveExpression(expression) {
        if (!expression.trim()) {
            return undefined;
        }
        if (expression.indexOf('\n') !== -1) {
            return undefined;
        }
        const getExpression = (ghciOutput) => {
            const matchResult = ghciOutput.match(/[^ ]* = (.*)/);
            if (!matchResult) {
                return undefined;
            }
            return matchResult[1];
        };
        this.ignoreErrors = true;
        try {
            const printingResult = getExpression(await this.run(`:print ${expression}`, false, false, false));
            if (printingResult !== undefined) {
                return printingResult;
            }
            let tempVarNum = 0;
            let potentialTempVar;
            do {
                tempVarNum += 1;
                potentialTempVar = getExpression(await this.run(`:print temp${tempVarNum}`, false, false, false));
            } while (potentialTempVar !== undefined);
            await this.run(`let temp${tempVarNum} = ${expression}`, false, false, false);
            return getExpression(await this.run(`:print temp${tempVarNum}`, false, false, false));
        }
        finally {
            this.ignoreErrors = false;
        }
    }
    forward() {
        this.run(':forward', true);
    }
    back() {
        this.run(':back', true);
    }
    step() {
        this.run(':step', true, true);
    }
    stop() {
        this.run(':quit');
        setTimeout(() => {
            this.ghciCmd.kill();
        }, 3000);
    }
    continue() {
        this.run(':continue', true);
    }
    async addedAllListeners() {
        return this.startText.then((text) => {
            const firstPrompt = text.indexOf('> ');
            this.emitter.emit('console-output', text.slice(0, firstPrompt + 2));
        });
    }
    async startDebug(moduleName) {
        moduleName = moduleName || 'main';
        await this.run(':trace ' + moduleName, true, true);
    }
    async run(commandText, emitStatusChanges = false, emitHistoryLength = false, emitCommandOutput = true, fulfilWithPrompt = false) {
        const shiftAndRunCommand = () => {
            const command = this.commands.shift();
            this.currentCommand = command;
            if (command) {
                if (command.emitCommandOutput) {
                    this.emitter.emit('command-issued', command.text);
                }
                this.stdin.write(command.text + os.EOL);
            }
        };
        const p = new Promise((fulfil) => {
            const command = {
                text: commandText,
                emitCommandOutput,
                fulfilWithPrompt,
                onFinish: async (output) => {
                    this.currentCommand = undefined;
                    function _fulfil(noPrompt) {
                        if (fulfilWithPrompt) {
                            fulfil(output);
                        }
                        else {
                            fulfil(noPrompt);
                        }
                    }
                    const lastEndOfLinePos = output.lastIndexOf(os.EOL);
                    if (lastEndOfLinePos === -1) {
                        if (emitStatusChanges) {
                            await this.emitStatusChanges(output, '', emitHistoryLength);
                        }
                        _fulfil('');
                    }
                    else {
                        const promptBeginPosition = lastEndOfLinePos + os.EOL.length;
                        if (emitStatusChanges) {
                            await this.emitStatusChanges(output.slice(promptBeginPosition, output.length), output.slice(0, lastEndOfLinePos), emitHistoryLength);
                        }
                        _fulfil(output.slice(0, lastEndOfLinePos));
                    }
                },
            };
            this.commands.push(command);
            if (this.currentCommand === undefined) {
                shiftAndRunCommand();
            }
        });
        p.then(() => {
            if (this.commands.length !== 0) {
                shiftAndRunCommand();
            }
        }).catch((e) => {
            atom.notifications.addError('An error happened', {
                detail: e.toString(),
                stack: e.stack,
                dismissable: true,
            });
        });
        return p;
    }
    addReadyEvent() {
        const eventSubs = [
            'paused-on-exception',
            'line-changed',
            'debug-finished',
        ];
        for (const eventName of eventSubs) {
            this.emitter.on(eventName, () => this.emitter.emit('ready', undefined));
        }
    }
    async getBindings() {
        const outputStr = await this.run(':show bindings', false, false, false);
        return outputStr.split(os.EOL);
    }
    async getHistoryLength() {
        const historyQuery = await this.run(':history 100', false, false, false);
        const regex = /-(\d*).*(?:\n|\r|\r\n)<end of history>$/;
        const matchResult = historyQuery.match(regex);
        if (!matchResult) {
            if (historyQuery.slice(-3) === '...') {
                return Infinity;
            }
            else {
                return 0;
            }
        }
        else {
            return parseInt(matchResult[1], 10);
        }
    }
    parsePrompt(stdOutput) {
        const patterns = [{
                pattern: /\[(?:[-\d]*: )?(.*):\((\d+),(\d+)\)-\((\d+),(\d+)\).*\].*> $/,
                func: (match) => ({
                    filename: match[1],
                    range: [[parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                        [parseInt(match[4], 10), parseInt(match[5], 10)]],
                }),
            }, {
                pattern: /\[(?:[-\d]*: )?(.*):(\d*):(\d*)-(\d*)\].*> $/,
                func: (match) => ({
                    filename: match[1],
                    range: [[parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                        [parseInt(match[2], 10) - 1, parseInt(match[4], 10)]],
                }),
            }, {
                pattern: /\[<exception thrown>\].*> $/,
                func: () => GHCIDebug.pausedOnError,
            }, {
                pattern: /.*> $/,
                func: () => GHCIDebug.finishedDebugging,
            }];
        for (const pattern of patterns) {
            const matchResult = stdOutput.match(pattern.pattern);
            if (matchResult) {
                return pattern.func(matchResult);
            }
        }
        throw new Error('Cannot read prompt: \n' + stdOutput);
    }
    async emitStatusChanges(prompt, mainBody, emitHistoryLength) {
        const result = this.parsePrompt(prompt);
        if (result === GHCIDebug.pausedOnError) {
            const historyLength = await this.getHistoryLength();
            this.emitter.emit('paused-on-exception', {
                historyLength,
                localBindings: mainBody.split('\n').slice(1),
            });
        }
        else if (result === GHCIDebug.finishedDebugging) {
            this.emitter.emit('debug-finished', undefined);
        }
        else {
            const breakInfo = result;
            breakInfo.localBindings = await this.getBindings();
            if (emitHistoryLength) {
                breakInfo.historyLength = await this.getHistoryLength();
            }
            this.emitter.emit('line-changed', breakInfo);
        }
    }
    onStderrReadable() {
        const stderrOutput = this.stderr.read();
        if (!stderrOutput || this.ignoreErrors) {
            return;
        }
        this.emitter.emit('error', stderrOutput.toString());
        if (this.currentStderrOutput === '') {
            const disp = this.emitter.on('ready', () => {
                this.emitter.emit('error-completed', this.currentStderrOutput);
                this.currentStderrOutput = '';
                disp.dispose();
            });
        }
        this.currentStderrOutput += stderrOutput.toString();
    }
    onStdoutReadable() {
        const currentString = (this.stdout.read() || '').toString();
        this.currentCommandBuffer += currentString;
        const finishStringPosition = this.currentCommandBuffer.search(this.commandFinishedString);
        if (finishStringPosition !== -1) {
            const outputString = this.currentCommandBuffer.slice(0, finishStringPosition);
            if (this.currentCommand) {
                if (this.currentCommand.emitCommandOutput) {
                    this.emitter.emit('console-output', outputString);
                }
                this.currentCommand.onFinish(outputString);
            }
            this.currentCommandBuffer = this.currentCommandBuffer.slice(finishStringPosition + this.commandFinishedString.length);
            this.onStdoutReadable();
        }
    }
    async moduleNameFromFilePath(filePath) {
        const cachedModuleName = this.moduleNameByPath.get(filePath);
        if (cachedModuleName)
            return cachedModuleName;
        const modules = (await this.run(':show modules')).split(os.EOL);
        const regex = /^([^ ]+) +\( +(.+), +\w+ +\)$/;
        for (const moduleStr of modules) {
            const matchResult = regex.exec(moduleStr);
            if (matchResult) {
                this.moduleNameByPath.set(matchResult[2], matchResult[1]);
            }
            else {
                console.error(`Unexpected reply from GHCI ':show modules': ${moduleStr}`);
            }
        }
        const newCachedModuleName = this.moduleNameByPath.get(filePath);
        if (newCachedModuleName) {
            return newCachedModuleName;
        }
        else {
            throw new Error(`Couldn't find module name for ${filePath}`);
        }
    }
}
GHCIDebug.pausedOnError = Symbol('Paused on Error');
GHCIDebug.finishedDebugging = Symbol('Finished debugging');
exports.GHCIDebug = GHCIDebug;
//# sourceMappingURL=data:application/json;base64,